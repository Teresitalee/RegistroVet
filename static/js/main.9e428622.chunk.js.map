{"version":3,"sources":["components/Header.js","components/NuevaCita.js","components/Cita.js","components/ListaCitas.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","stateInicial","cita","mascota","propietario","fecha","hora","sintomas","error","NuevaCita","state","handlechange","e","setState","target","name","value","handleSubmit","preventDefault","newCita","id","uuid","props","crearNuevaCita","this","onSubmit","type","placeholder","onChange","Component","Cita","eliminarCita","onClick","ListaCitas","citas","mensaje","Object","keys","lenght","map","key","App","datos","filter","citaLocalStorage","localStorage","getItem","JSON","parse","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9e428622.chunk.js","sourcesContent":["import React from 'react';\r\nimport propTypes from 'prop-types';\r\n\r\n\r\nconst Header = ({titulo}) => {\r\n    return ( \r\n        <header>\r\n            <h3 className=\"text-center mt-4 text-white\"> {titulo} </h3>\r\n        </header>\r\n     );\r\n}\r\n\r\n//documentando codigo\r\nHeader.propTypes = {\r\n    titulo : propTypes.string.isRequired\r\n}\r\n\r\n\r\n \r\nexport default Header;","import React, { Component } from 'react';\r\nimport uuid from 'uuid';\r\nimport propTypes from 'prop-types';\r\n\r\n\r\nconst stateInicial = {\r\n    cita : {\r\n        mascota : '',\r\n        propietario : '',\r\n        fecha :'',\r\n        hora : '',\r\n        sintomas : ''\r\n      },\r\n      error : false\r\n\r\n}\r\n\r\n\r\nclass NuevaCita extends Component {\r\n    state = { ...stateInicial }\r\n\r\n     handlechange = e => {\r\n        // colocar lo que el usuario esta escribiendo en el state y sobreescribirlo\r\n        this.setState ({\r\n            cita : {\r\n            // crear copia del state original\r\n            ...this.state.cita,\r\n            \r\n            // maper todo el objeto de CITA yo tomara el input por su nombre y valor\r\n            [e.target.name] : e.target.value\r\n            }\r\n        })\r\n\r\n     }\r\n\r\n     // envio de datos SUBMIT desde el boton agregar cita\r\n\r\n     handleSubmit = e => {\r\n         e.preventDefault();\r\n\r\n         //extraer los valores del state\r\n         const { mascota, propietario, fecha, hora, sintomas } = this.state.cita;\r\n\r\n         // validacion de todos los campos de los inputs\r\n         if (mascota === '' || propietario === '' || fecha === '' || hora === '' || sintomas === '') {\r\n             this.setState({\r\n                 error: true\r\n             });\r\n\r\n             //detener la ejecucion\r\n             return ;\r\n         }\r\n\r\n         // generar un objeto con los datos\r\n         const newCita = {...this.state.cita};\r\n         newCita.id = uuid();\r\n\r\n         //agregar la cita al state\r\n         this.props.crearNuevaCita(newCita)\r\n\r\n         // colocar el stateInicial\r\n         this.setState({\r\n             ...stateInicial\r\n         })\r\n     }\r\n\r\n\r\n    render() { \r\n\r\n        //extraer el valor de state de ERROR\r\n        const { error } = this.state;\r\n\r\n\r\n        return (\r\n            <div className=\"card mt-4 py-4 mb-5\">\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title text-center mb-5 text-bold\">\r\n                        Ficha de Ingreso Mascota\r\n                    </h5>\r\n\r\n                    { error ? <div className=\"alert alert-warning mt-2 mb-5 text-center\">\r\n                        Todos los campos son obligatorios</div> : null }\r\n\r\n                    <form\r\n                    onSubmit={this.handleSubmit}\r\n                    >\r\n                        <div className=\"from-group row mx-auto\">\r\n                            <label className=\"col-sm-4 col-lg-3 col-form-label\">Nombre Mascota</label>\r\n                            <div className=\"col-sm-8 col-lg-8\">\r\n                                <input \r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Ingrese un nombre\"\r\n                                name=\"mascota\"\r\n                                onChange = {this.handlechange}\r\n                                value = {this.state.cita.mascota}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"from-group row mt-3 mx-auto\">\r\n                            <label className=\"col-sm-4 col-lg-3 col-form-label\">Nombre Dueño</label>\r\n                            <div className=\"col-sm-8 col-lg-8\">\r\n                                <input \r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Ingrese nombre completo\"\r\n                                name=\"propietario\"\r\n                                onChange = {this.handlechange}\r\n                                value = {this.state.cita.propietario}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"from-group row mt-3 mx-auto\">\r\n                            <label className=\"col-sm-4 col-lg-3 col-form-label\">Fecha</label>\r\n                            <div className=\"col-sm-6 col-lg-3\">\r\n                                <input \r\n                                type=\"date\"\r\n                                className=\"form-control\"\r\n                                name=\"fecha\"\r\n                                onChange = {this.handlechange}\r\n                                value = {this.state.cita.fecha}\r\n                                />\r\n                            </div>\r\n\r\n                            <label className=\"col-sm-3 col-lg-2 col-form-label\">Hora</label>\r\n                            <div className=\"col-sm-6 col-lg-3\">\r\n                                <input \r\n                                type=\"time\"\r\n                                className=\"form-control\"\r\n                                name=\"hora\"\r\n                                onChange = {this.handlechange}\r\n                                value = {this.state.cita.hora}\r\n                                />\r\n                            </div>\r\n                       </div>\r\n\r\n                       <div className=\"from-group row mt-3 mx-auto\">\r\n                            <label className=\"col-sm-4 col-lg-3 col-form-label\">Síntomas</label>\r\n                            <div className=\"col-sm-6 col-lg-8\">\r\n                                <textarea \r\n                                className=\"form-control\"\r\n                                name=\"sintomas\"\r\n                                placeholder=\"sintomas o molestar de la mascota\"\r\n                                onChange = {this.handlechange}\r\n                                value = {this.state.cita.sintomas}\r\n                                >\r\n                                </textarea>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <input type=\"submit\" className=\"py-3 mt-4 btn btn-success btn-block\" value=\"Agregar cita\" />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n          );\r\n    }\r\n}\r\n\r\n//documentado codigo\r\nNuevaCita.propTypes = {\r\n    crearNuevaCita : propTypes.func.isRequired\r\n}\r\n \r\nexport default NuevaCita;","import React from 'react';\r\nimport propTypes from 'prop-types';\r\n\r\nconst Cita = ({cita , eliminarCita}) => (\r\n    <div className=\"mt-3\">\r\n        <div className=\"mt-2\">\r\n            <h3 className=\"mt-2\">{cita.mascota}</h3>\r\n            <p className=\"card-text\"><span>Nombre Dueño : </span> {cita.propietario}</p>\r\n            <p className=\"card-text\"><span>Fecha : </span> {cita.fecha}</p>\r\n            <p className=\"card-text\"><span>Hora : </span> {cita.hora}</p>\r\n            <p className=\"card-text\"><span className=\"text-bold\">Sintomas : </span>{cita.sintomas}</p>\r\n            \r\n            <button\r\n             className=\"btn btn-danger\"\r\n             onClick={() => eliminarCita(cita.id)} //pasa el click, llama a la funcion y pasa el valor\r\n            >Borrar &times;</button>\r\n        </div>\r\n    </div>\r\n);\r\n\r\n//documentacion de codigo\r\nCita.propTypes = {\r\n    cita : propTypes.object.isRequired,\r\n    eliminarCita : propTypes.func.isRequired\r\n}\r\n    \r\n\r\n \r\nexport default Cita;","import React from 'react';\r\nimport Cita from './Cita';\r\nimport propTypes from 'prop-types';\r\n\r\nconst ListaCitas = ({citas , eliminarCita}) => {\r\n\r\n    //imprimir un mensaje en caso de que no haya ningun paciente agregado\r\n    const mensaje = Object.keys(citas).lenght === 0 ? 'No Hay citas' : 'Administra tus citas aqui';\r\n\r\n\r\n    return (\r\n         <div className=\"card mt-2 py-5\">\r\n            <div className=\"card-body\">\r\n                <h4 className=\"card-title text-center mb-2\">{mensaje}</h4>\r\n                <div className=\"list-cita\">\r\n                    {citas.map (cita =>\r\n                    <Cita\r\n                     key={cita.id}\r\n                     cita={cita}\r\n                     eliminarCita={eliminarCita}\r\n                    \r\n                     />\r\n                    )}\r\n\r\n                </div>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n        \r\n       \r\n\r\n//documentacion de codigo\r\nListaCitas.propTypes = {\r\n    citas : propTypes.array.isRequired,\r\n    eliminarCita : propTypes.func.isRequired\r\n}\r\n\r\n\r\n \r\nexport default ListaCitas;","import React, { Component } from 'react';\r\nimport './bootstrap.min.css';\r\nimport Header from './components/Header';\r\nimport NuevaCita from './components/NuevaCita';\r\nimport ListaCitas from './components/ListaCitas';\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    citas : [] // arreglo de objetos\r\n  }\r\n\r\n  // ciclo de vida , cuando se carga un componente\r\n  componentDidMount () {\r\n    const citaLocalStorage = localStorage.getItem('citas');\r\n    if(citaLocalStorage) {\r\n      this.setState({\r\n        citas: JSON.parse(citaLocalStorage)\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  //cuando se elimina o agregamos algo y se vuelve actualizar\r\n  componentDidUpdate () {\r\n    localStorage.setItem('citas', JSON.stringify(this.state.citas));\r\n\r\n  }\r\n\r\n  crearNuevaCita = datos => {\r\n    //copiar el state actual\r\n    const citas = [...this.state.citas , datos];\r\n\r\n    //agregar el nuevo state\r\n    this.setState({\r\n      citas\r\n    })\r\n  }\r\n\r\n  //eliminar cita del state\r\n  eliminarCita = id => {\r\n    //tomar una copia del state\r\n    const citasActuales = [...this.state.citas];\r\n\r\n    //utilizar filter para sacar el elemento id\r\n    const citas = citasActuales.filter(cita => cita.id !== id )\r\n\r\n    // actualizar el state\r\n    this.setState({\r\n      citas\r\n    })\r\n\r\n  }\r\n\r\n\r\n  render () {\r\n\r\n    return ( \r\n      <div className=\"container\">\r\n        <Header\r\n        titulo = 'Reserva médica veterinaria'\r\n        \r\n         />\r\n\r\n         <div className=\"row\">\r\n           <div className=\"col-md-8 mx-auto\">\r\n             <NuevaCita\r\n             crearNuevaCita={this.crearNuevaCita}\r\n              />\r\n           </div>\r\n           <div className=\"mt-5 col-md-8 mx-auto mb-4\">\r\n             <ListaCitas\r\n               citas={this.state.citas}\r\n               eliminarCita={this.eliminarCita}\r\n              />\r\n\r\n           </div>\r\n         </div>\r\n\r\n      </div>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}